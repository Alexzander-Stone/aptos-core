============ initial bytecode ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: bool
  0: $t1 := false
  1: $t0 := pack Test::Impotent($t1)
  2: label L0
  3: goto 2
  4: label L1
  5: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: bool
     var $t2: bool
  0: $t1 := false
  1: $t0 := pack Test::Impotent($t1)
  2: label L0
  3: $t2 := true
  4: if ($t2) goto 5 else goto 7
  5: label L2
  6: goto 9
  7: label L3
  8: goto 11
  9: label L4
 10: goto 2
 11: label L1
 12: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: u64
  0: $t2 := false
  1: $t1 := pack Test::Impotent($t2)
  2: if ($t0) goto 3 else goto 8
  3: label L0
  4: label L3
  5: goto 4
  6: label L4
  7: goto 11
  8: label L1
  9: $t3 := 42
 10: abort($t3)
 11: label L2
 12: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: bool
     # abort state: {}
  0: $t1 := false
     # abort state: {}
  1: $t0 := pack Test::Impotent($t1)
     # abort state: {}
  2: label L0
     # abort state: {}
  3: goto 2
     # abort state: {returns}
  4: label L1
     # abort state: {returns}
  5: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: bool
     var $t2: bool
     # abort state: {returns}
  0: $t1 := false
     # abort state: {returns}
  1: $t0 := pack Test::Impotent($t1)
     # abort state: {returns}
  2: label L0
     # abort state: {returns}
  3: $t2 := true
     # abort state: {returns}
  4: if ($t2) goto 5 else goto 7
     # abort state: {returns}
  5: label L2
     # abort state: {returns}
  6: goto 9
     # abort state: {returns}
  7: label L3
     # abort state: {returns}
  8: goto 11
     # abort state: {returns}
  9: label L4
     # abort state: {returns}
 10: goto 2
     # abort state: {returns}
 11: label L1
     # abort state: {returns}
 12: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: u64
     # abort state: {aborts}
  0: $t2 := false
     # abort state: {aborts}
  1: $t1 := pack Test::Impotent($t2)
     # abort state: {aborts}
  2: if ($t0) goto 3 else goto 8
     # abort state: {}
  3: label L0
     # abort state: {}
  4: label L3
     # abort state: {}
  5: goto 4
     # abort state: {returns}
  6: label L4
     # abort state: {returns}
  7: goto 11
     # abort state: {aborts}
  8: label L1
     # abort state: {aborts}
  9: $t3 := 42
     # abort state: {aborts}
 10: abort($t3)
     # abort state: {returns}
 11: label L2
     # abort state: {returns}
 12: return ()
}
